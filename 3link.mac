ratprint: false$
declare ("'", alphabetic)$

symbolilze(M):= subst([ diff(q1,t,2)=ddq1
                      , diff(q2,t,2)=ddq2
                      , diff(q3,t,2)=ddq3
                      , diff(q1,t,1)=dq1
                      , diff(q2,t,1)=dq2
                      , diff(q3,t,1)=dq3
                    ], M)$
depends([q1, q2, q3] , t)$

pc1x: l1 * cos(q1) $
pc1y: l1 * sin(q1) $
pc2x: pc1x + l2 * cos(q1 + q2) $
pc2y: pc1y + l2 * sin(q1 + q2) $
pc3x: pc2x + l3 * cos(q1 + q2 + q3) $
pc3y: pc2y + l3 * sin(q1 + q2 + q3) $
vc1x: diff(pc1x, t)$
vc1y: diff(pc1y, t)$
vc2x: diff(pc2x, t)$
vc2y: diff(pc2y, t)$
vc3x: diff(pc3x, t)$
vc3y: diff(pc3y, t)$

q1':diff(q1,t)$
q2':diff(q2,t)$
q3':diff(q3,t)$
q1'':diff(q1',t)$
q2'':diff(q2',t)$
q3'':diff(q3',t)$

K: 1/2 * m1 * (vc1x**2 + vc1y**2)
+ 1/2 * m2 * (vc2x**2 + vc2y**2)
+ 1/2 * m3 * (vc3x**2 + vc3y**2)$

U: m1 * pc1y * g + m2 * pc2y * g + m3 * pc3y * g$

L : K - U $

load ("f90")$
f90_output_line_length_max:10000000$
showmatf90(m):= for i thru length(m) do
    for j thru length(transpose(m)) do
    block([], printf(true,"[~d][~d] = ", i-1,j-1), f90(m[i][j]))$

X : [q1, q2, q3]$
dX : [q1', q2', q3']$
ddX : [q1'', q2'', q3'']$


rhs : (expand(diff(jacobian([L],dX), t) - jacobian([L], X)))$
display(trigsimp(symbolilze(rhs)))$

/*  A ddX + b = tau */
H:(trigsimp(expand(trigexpand(jacobian(args(rhs)[1], ddX)))))$
C:symbolilze(expand(transpose(rhs) - (jacobian(args(rhs)[1], ddX)).transpose(matrix(ddX))))$
showmatf90(H)$
showmatf90(C)$

H2:(trigsimp(expand(trigexpand(symbolilze(jacobian(jacobian([K],dX)[1], dX))))))$
f90(trigsimp(expand(trigexpand(symbolilze(dX . H . dX / 2 - K)))))$

/*
f90((trigsimp(expand(2*symbolilze(K) - dX . H . dX ))))$
*/

